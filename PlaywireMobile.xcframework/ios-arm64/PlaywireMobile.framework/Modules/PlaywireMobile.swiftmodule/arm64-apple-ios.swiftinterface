// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PlaywireMobile
// swift-module-flags-ignorable: -enable-bare-slash-regex
import DeveloperToolsSupport
import Foundation
@_exported import PlaywireMobile
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers final public class PlaywireMobileAds : ObjectiveC.NSObject {
  @objc public static let shared: PlaywireMobile.PlaywireMobileAds
  @objc final public func initialize(publisherId: Swift.String, appId: Swift.String, configuration: PlaywireMobile.PMAdsConfiguration = PMAdsConfiguration(), completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc deinit
}
public typealias PMNData = [Swift.String : Any]
public typealias PMNFilter = (_ event: PlaywireMobile.PMNEvent) -> Swift.Bool
public typealias PMNAction = (_ event: PlaywireMobile.PMNEvent, _ data: PlaywireMobile.PMNData) -> Swift.Void
@objc @_hasMissingDesignatedInitializers @objcMembers public class PMNListenerToken : ObjectiveC.NSObject {
  @objc public func cancel()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class PMNotifier : ObjectiveC.NSObject {
  @objc public static let shared: PlaywireMobile.PMNotifier
  @objc public func startConsoleLogger()
  public func startConsoleLogger(filter: @escaping PlaywireMobile.PMNFilter)
  public func startConsoleLogger(event: PlaywireMobile.PMNEvent)
  @discardableResult
  public func addListener(_ listener: Swift.AnyObject, filter: @escaping PlaywireMobile.PMNFilter, action: @escaping PlaywireMobile.PMNAction) -> PlaywireMobile.PMNListenerToken
  @discardableResult
  public func addListener(_ listener: Swift.AnyObject, event: PlaywireMobile.PMNEvent? = nil, action: @escaping PlaywireMobile.PMNAction) -> PlaywireMobile.PMNListenerToken
  public func notify(event: PlaywireMobile.PMNEvent, data: [Swift.String : Any]? = nil)
  @objc deinit
}
@objc public enum FloatingViewCorner : Swift.Int {
  case topLeft
  case topRight
  case bottomLeft
  case bottomRight
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class PMFloatingView : UIKit.UIView, UIKit.UIGestureRecognizerDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var corneredMargins: UIKit.UIEdgeInsets
  @objc @_Concurrency.MainActor(unsafe) public var corneredSize: CoreFoundation.CGSize
  @objc @_Concurrency.MainActor(unsafe) public init(controller: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) @objc public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public func layoutSuperimposed(to targetView: UIKit.UIView)
  @objc @_Concurrency.MainActor(unsafe) public func layoutCornered()
  @objc @_Concurrency.MainActor(unsafe) public func resetLayout()
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class PMFullScreenAdViewController : UIKit.UIViewController, PlaywireMobile.PMAdPlayerViewDelegate {
  @_Concurrency.MainActor(unsafe) public init(fullScreenAd: any PlaywireMobile.PMFullScreenAd, adPlayerView: PlaywireMobile.PMAdPlayerView)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc public func closePressed(adPlayerView: PlaywireMobile.PMAdPlayerView)
  @_Concurrency.MainActor(unsafe) open func createAdView(ad: any PlaywireMobile.PMAd) -> PlaywireMobile.PMAdPlayerView
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class PMBannerView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public init(bannerLoader: PlaywireMobile.PMBannerAdLoader)
  @objc deinit
}
@objc public protocol PMAdDelegate {
  @objc func adImpressed(ad: any PlaywireMobile.PMAd)
  @objc func adClicked(ad: any PlaywireMobile.PMAd)
}
@objc public protocol PMAd {
  @objc var adLoader: PlaywireMobile.PMAdLoader { get }
  @objc var network: any PlaywireMobile.PMNetwork { get }
  @objc var delegate: (any PlaywireMobile.PMAdDelegate)? { get set }
  @objc var isVideo: Swift.Bool { get }
  @objc func cleanup()
}
extension PlaywireMobile.PMAd {
  public func asFullScreenAd() -> (any PlaywireMobile.PMFullScreenAd)?
  public func asInterstitialAd() -> (any PlaywireMobile.PMInterstitialAd)?
  public func notifyAdImpressed()
  public func notifyAdClicked()
}
public enum PMNSeverity : Swift.Int {
  case Information
  case Warning
  case Error
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers public class PMNEvent {
  final public let code: Swift.Int?
  final public let severity: PlaywireMobile.PMNSeverity?
  @objc final public let description: Swift.String?
  public init(code: Swift.Int? = nil, severity: PlaywireMobile.PMNSeverity? = nil, description: Swift.String? = nil)
  convenience public init(type: PlaywireMobile.PMNEventType, severity: PlaywireMobile.PMNSeverity? = nil, description: Swift.String? = nil)
  public func matches(_ event: PlaywireMobile.PMNEvent?) -> Swift.Bool
  @objc deinit
}
@objc public protocol PMFullScreenAdDelegate : PlaywireMobile.PMAdDelegate {
  @objc func fullScreeenAdPresented(fullScreen: any PlaywireMobile.PMFullScreenAd)
  @objc func fullScreenAdWillClose(fullScreen: any PlaywireMobile.PMFullScreenAd)
  @objc func fullScreenAdClosed(fullScreen: any PlaywireMobile.PMFullScreenAd)
}
@objc public protocol PMFullScreenAd : PlaywireMobile.PMAd {
  @objc func show(from vc: UIKit.UIViewController)
}
extension PlaywireMobile.PMFullScreenAd {
  public func notifyFullScreenWillBeClosed()
  public func notifyFullScreenClosed()
  public func notifyFullScreenPresented()
}
@objc @objcMembers final public class PMConfigUnit : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let name: Swift.String
  @objc final public let mode: PlaywireMobile.PMConfigUnitMode
  final public let timeToClose: Swift.Int?
  @objc final public let size: PlaywireMobile.PMConfigUnitSize?
  @objc final public let refresh: PlaywireMobile.PMConfigUnitRefresh?
  @objc final public let networks: [PlaywireMobile.PMConfigUnitNetwork]?
  @objc deinit
  public init(from decoder: any Swift.Decoder) throws
}
@objc public enum PMConfigUnitMode : Swift.Int, Swift.Decodable {
  case Unknown
  case Interstitial
  case Banner
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers final public class PMConfigUnitNetwork : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let name: Swift.String
  @objc final public let vast: PlaywireMobile.PMConfigUnitNetworkVast?
  @objc final public let vastGam: PlaywireMobile.PMConfigUnitNetworkVastGam?
  @objc deinit
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class PMConfigUnitNetworkVast : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let url: Swift.String
  @objc deinit
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class PMConfigUnitNetworkVastGam : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let code: Swift.String
  @objc deinit
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers @objcMembers final public class PMConfigUnitSize : ObjectiveC.NSObject, Swift.Decodable {
  @objc public static let _320x50: PlaywireMobile.PMConfigUnitSize
  @objc final public let width: Swift.Int
  @objc final public let height: Swift.Int
  @objc final public var cgSize: CoreFoundation.CGSize {
    @objc get
  }
  @objc deinit
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers @objcMembers final public class PMConfigUnitRefresh : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let autoTime: Swift.Int
  @objc final public let autoMaxCount: Swift.Int
  @objc final public let manualTime: Swift.Int
  @objc final public let manualMaxCount: Swift.Int
  @objc final public let frequencyCap: Swift.Int
  @objc deinit
  public init(from decoder: any Swift.Decoder) throws
}
@objc public protocol PMAdPlayerViewDelegate {
  @objc func closePressed(adPlayerView: PlaywireMobile.PMAdPlayerView)
}
@objc @_Concurrency.MainActor(unsafe) open class PMAdPlayerView : UIKit.UIView {
  public enum Layout {
    case FullScreen
    case Miniplayer
    public static func == (a: PlaywireMobile.PMAdPlayerView.Layout, b: PlaywireMobile.PMAdPlayerView.Layout) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) final public let ad: any PlaywireMobile.PMAd
  @objc @_Concurrency.MainActor(unsafe) public var delegate: (any PlaywireMobile.PMAdPlayerViewDelegate)?
  @_Concurrency.MainActor(unsafe) public var timeToClose: Swift.Int {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isFullScreenEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public let adContentContainer: UIKit.UIView
  @_Concurrency.MainActor(unsafe) open var showControls: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var showClose: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public init(ad: any PlaywireMobile.PMAd, layout: PlaywireMobile.PMAdPlayerView.Layout)
  @objc deinit
  @_Concurrency.MainActor(unsafe) open func setupLayout()
  @_Concurrency.MainActor(unsafe) open func setupConstraints()
  @_Concurrency.MainActor(unsafe) open func activateConstraints()
  @_Concurrency.MainActor(unsafe) open func setupHandlers()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc @_Concurrency.MainActor(unsafe) open var isMuted: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @_Concurrency.MainActor(unsafe) open func onMutePressed()
  @objc @_Concurrency.MainActor(unsafe) open func onFullscreenPressed()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) open func viewFirstTimePresented()
  @_Concurrency.MainActor(unsafe) open func startCloseButtonAnnimation()
  @objc @_Concurrency.MainActor(unsafe) public func setCloseButtonFilling(filling: Swift.Float)
  @_Concurrency.MainActor(unsafe) open func startCDBTimer(total: Swift.Float)
  @objc @_Concurrency.MainActor(unsafe) open func close()
  @objc @_Concurrency.MainActor(unsafe) open func setContdown(value: Swift.Int)
  @objc @_Concurrency.MainActor(unsafe) public func startLoading()
  @objc @_Concurrency.MainActor(unsafe) public func stopLoading()
}
@objc public protocol PMBannerAdDelegate : PlaywireMobile.PMAdDelegate {
  @objc func bannerAdFinishedPlaying(banner: any PlaywireMobile.PMBannerAd)
}
@objc public protocol PMBannerAd : PlaywireMobile.PMAd {
  @objc var adView: UIKit.UIView { get }
  @objc func willStartContextChange()
  @objc func didEndContextChange()
}
extension PlaywireMobile.PMBannerAd {
  public func notifyAdMediaFinishedPlaying()
}
public protocol PMNetworkAdapter {
  init()
  var initialized: Swift.Bool { get }
  func initialize(config: PlaywireMobile.PMConfigNetwork, onComplete: ((_ result: Any?) -> Swift.Void)?)
  func create() -> any PlaywireMobile.PMNetwork
  func supportsMode(mode: PlaywireMobile.PMConfigUnitMode) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class PMAdsConfiguration : ObjectiveC.NSObject {
  @objc final public var viewController: UIKit.UIViewController? {
    get
  }
  @objc @discardableResult
  final public func with(viewController: UIKit.UIViewController) -> PlaywireMobile.PMAdsConfiguration
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class PMAdLoaderConfiguration : ObjectiveC.NSObject {
  @objc final public let adUnitName: Swift.String
  @objc weak public var viewController: UIKit.UIViewController? {
    get
  }
  @objc public var successRate: Swift.Double {
    get
  }
  @objc public var mock: Swift.Bool {
    get
  }
  @objc deinit
}
@objc @objcMembers public class PMAdLoaderBuilder : ObjectiveC.NSObject {
  @objc public init(adUnitName: Swift.String)
  @objc @discardableResult
  public func with(viewController: UIKit.UIViewController) -> PlaywireMobile.PMAdLoaderBuilder
  @objc @discardableResult
  public func with(successRate: Swift.Double) -> PlaywireMobile.PMAdLoaderBuilder
  @objc @discardableResult
  public func with(mock: Swift.Bool) -> PlaywireMobile.PMAdLoaderBuilder
  @objc public func buildBannerAdLoader() -> PlaywireMobile.PMBannerAdLoader
  @objc public func buildInterstitialAdLoader() -> PlaywireMobile.PMInterstitialAdLoader
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class PMAdLoader : ObjectiveC.NSObject {
  final public let configuration: PlaywireMobile.PMAdLoaderConfiguration
  public var config: PlaywireMobile.PMConfig? {
    get
  }
  public var configUnit: PlaywireMobile.PMConfigUnit? {
    get
  }
  open func adImpressed(ad: any PlaywireMobile.PMAd)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers final public class PMInterstitialAdLoader : PlaywireMobile.PMAdLoader {
  @objc final public func load(onAdResult: @escaping (_ interstitial: (any PlaywireMobile.PMInterstitialAd)?) -> Swift.Void)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers final public class PMBannerAdLoader : PlaywireMobile.PMAdLoader {
  @objc final public func load(onAdResult: @escaping (_ banner: (any PlaywireMobile.PMBannerAd)?) -> Swift.Void)
  @objc final public func refresh()
  @objc override final public func adImpressed(ad: any PlaywireMobile.PMAd)
  @objc deinit
}
@objc public protocol PMInterstitialAdDelegate : PlaywireMobile.PMFullScreenAdDelegate {
}
@objc public protocol PMInterstitialAd : PlaywireMobile.PMFullScreenAd {
}
@objc public protocol PMNetwork {
  @objc func load(config: PlaywireMobile.PMConfig, configUnit: PlaywireMobile.PMConfigUnit, configUnitNetwork: PlaywireMobile.PMConfigUnitNetwork, loaderConfiguration: PlaywireMobile.PMAdLoaderConfiguration?, onComplete: @escaping () -> Swift.Void)
  @objc func isSuccess() -> Swift.Bool
  @objc func asInterstitial(loader: PlaywireMobile.PMAdLoader) -> (any PlaywireMobile.PMInterstitialAd)?
  @objc func asBanner(loader: PlaywireMobile.PMAdLoader) -> (any PlaywireMobile.PMBannerAd)?
}
@objc public protocol PMAdViewPresenterDelegate {
  @objc func didChangeAdPresenterBanner(presenter: PlaywireMobile.PMAdViewPresenter, oldBanner: (any PlaywireMobile.PMBannerAd)?, newBanner: (any PlaywireMobile.PMBannerAd)?)
}
@objc public protocol PMAdViewPresenterViewHolder {
  @objc func willStartPresentingAd(presenter: PlaywireMobile.PMAdViewPresenter, refresh: Swift.Bool)
  @objc func didEndPresentingAd(presenter: PlaywireMobile.PMAdViewPresenter, willRefresh: Swift.Bool)
}
@objc @objcMembers public class PMAdViewPresenter : ObjectiveC.NSObject {
  @objc public var banner: (any PlaywireMobile.PMBannerAd)? {
    get
  }
  @objc weak public var delegate: (any PlaywireMobile.PMAdViewPresenterDelegate)?
  @objc convenience public init(adUnitName: Swift.String, controller: UIKit.UIViewController)
  @objc public init(bannerLoader: PlaywireMobile.PMBannerAdLoader)
  @objc public var bannerHolder: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc public func cleanup()
  @objc deinit
}
@objc public protocol PMFloatingBannerAnimationHandler {
  @objc func performAnimation(block: @escaping () -> Swift.Void, completion: (() -> Swift.Void)?)
}
@objc @objcMembers public class PMFloatingBanner : ObjectiveC.NSObject, PlaywireMobile.PMAdViewPresenterDelegate {
  @objc weak public var animationHandler: (any PlaywireMobile.PMFloatingBannerAnimationHandler)?
  @objc public var preferredCorner: PlaywireMobile.FloatingViewCorner
  @objc public var inlineView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc public init(presenter: PlaywireMobile.PMAdViewPresenter, floatingView: PlaywireMobile.PMFloatingView)
  @objc deinit
  @objc public func didChangeAdPresenterBanner(presenter: PlaywireMobile.PMAdViewPresenter, oldBanner: (any PlaywireMobile.PMBannerAd)?, newBanner: (any PlaywireMobile.PMBannerAd)?)
  @objc public func cleanup()
}
public enum PMConfigNetworkType : Swift.String, Swift.Decodable {
  case Mock
  case Vast
  case VastGam
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers final public class PMConfigNetwork : ObjectiveC.NSObject, Swift.Decodable {
  final public let type: PlaywireMobile.PMConfigNetworkType
  @objc deinit
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class PMConfig : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let app: PlaywireMobile.PMConfigApp?
  @objc final public let networks: [Swift.String : PlaywireMobile.PMConfigNetwork]?
  @objc final public let units: [PlaywireMobile.PMConfigUnit]?
  @objc deinit
  public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers final public class PMConfigApp : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let storeUrl: Swift.String?
  final public let childProtection: Swift.Bool?
  @objc final public let publisherUrl: Swift.String?
  @objc deinit
  public init(from decoder: any Swift.Decoder) throws
}
public enum PMNEventType : Swift.Int {
  case SDKInitialization
  case ConfigLoading
  case ConfigDataLoading
  case ConfigDataLoadingCache
  case ConfigDataLoadingCacheUse
  case ConfigDataLoadingCacheUpdate
  case ConfigDataLoadingHttp
  case ConfigDataLoadingHttpNoNetwork
  case ConfigDataLoadingHttpBadRequest
  case ConfigDataLoadingHttpBadResponse
  case ConfigJsonParsing
  case ConfigJsonParsingError
  case ConfigValidation
  case ConfigValidationError
  case NetworkInitialization
  case NetworkInitializationAdapterNotFound
  case SDKInitializationUser
  case SDKInitializationUserMultiple
  case SDKInitializationUserMetadata
  case AdLoading
  case AdLoadingNetwork
  case AdLoadingNetworkUnavailable
  case AdLoadingNetworkFill
  case AdLoadingNetworkNoFill
  case AdLoadingResult
  case AdLoadingResultNoFill
  case AdLoadingResultNoSuccessRate
  case AdLoadingResultMock
  case AdLoadingRefresh
  case AdLoadingRefreshAutoCountReached
  case AdLoadingRefreshManualCountReached
  case AdLoadingRefreshFrequencyCap
  case AdLoadingUser
  case AdLoadingUserMultiple
  case AdLoadingUserBadUnitName
  case AdLoadingUserSDKNoInitialized
  case AdLoadingUserRefreshManualSoon
  case NetworkLoading
  case MockNetworkLoading
  case VastNetworkLoading
  case VastNetworkLoadingUser
  case VastNetworkLoadingUserViewController
  case VastNetworkLoadingResult
  case VastNetworkLoadingResultFill
  case VastNetworkLoadingResultNoFill
  case AdPresentation
  case MockAdPresentation
  case VastAdPresentation
  case VastAdPresentationError
  case AdPresentationUser
  case AdPresentationUserInterstitial
  case AdPresentationUserInterstitialMultiple
  case Undefined
  public var code: Swift.Int {
    get
  }
  public var severity: PlaywireMobile.PMNSeverity {
    get
  }
  public var description: Swift.String {
    get
  }
  public func path() -> [PlaywireMobile.PMNEventType]
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension PlaywireMobile.FloatingViewCorner : Swift.Equatable {}
extension PlaywireMobile.FloatingViewCorner : Swift.Hashable {}
extension PlaywireMobile.FloatingViewCorner : Swift.RawRepresentable {}
extension PlaywireMobile.PMNSeverity : Swift.Equatable {}
extension PlaywireMobile.PMNSeverity : Swift.Hashable {}
extension PlaywireMobile.PMNSeverity : Swift.RawRepresentable {}
extension PlaywireMobile.PMConfigUnitMode : Swift.Equatable {}
extension PlaywireMobile.PMConfigUnitMode : Swift.Hashable {}
extension PlaywireMobile.PMConfigUnitMode : Swift.RawRepresentable {}
extension PlaywireMobile.PMAdPlayerView.Layout : Swift.Equatable {}
extension PlaywireMobile.PMAdPlayerView.Layout : Swift.Hashable {}
extension PlaywireMobile.PMConfigNetworkType : Swift.Equatable {}
extension PlaywireMobile.PMConfigNetworkType : Swift.Hashable {}
extension PlaywireMobile.PMConfigNetworkType : Swift.RawRepresentable {}
extension PlaywireMobile.PMNEventType : Swift.Equatable {}
extension PlaywireMobile.PMNEventType : Swift.Hashable {}
extension PlaywireMobile.PMNEventType : Swift.RawRepresentable {}
